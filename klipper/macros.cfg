### Gcode variables

[gcode_macro ADD_VARIABLE]
gcode:
  {% set MY_VARIABLE = printer["gcode_macro gcode_variables"].my_variable %}
  {% set NEW_VARIABLE = MY_VARIABLE + 1 %}
  SET_GCODE_VARIABLE MACRO=gcode_variables VARIABLE=my_variable VALUE={NEW_VARIABLE}

[gcode_macro GCODE_VARIABLES]
variable_my_variable: 0
gcode:
  {% set MY_VARIABLE = printer["gcode_macro gcode_variables"].my_variable %}
  M118 {MY_VARIABLE}
###

[gcode_macro CALIBRATE_HOTEND_PID]
gcode:
  PID_CALIBRATE HEATER=extruder TARGET=210
  SAVE_CONFIG

[gcode_macro G29]
gcode:
  G28
  bed_mesh_calibrate
  G1 X0 Y0 Z10 F4200

[gcode_macro MESH_CHECK]
description: Checks if a mesh exists to determine whether to create a new one
gcode:
    {% if printer.bed_mesh.profiles['default'] is defined %}
        BED_MESH_PROFILE LOAD='default' ; load mesh
    {% else %}
        BED_MESH_CALIBRATE ; generate new mesh
    {% endif %}

## conditional home
[gcode_macro conditional_home]
description: Only home axes not already homed
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% endif %}

[gcode_macro resonance_calibration]
# This macro runs the resonance calibration and generates the graphs
gcode:
    # This is expected to fail the first time
    MEASURE_AXES_NOISE
    # Now it should work
    TEST_RESONANCES AXIS=X
    # This is expected to fail the first time
    MEASURE_AXES_NOISE
    # Now it should work
    TEST_RESONANCES AXIS=Y
    # Generate graphs
    RUN_SHELL_COMMAND CMD=generate_graphs


[gcode_macro Press_Advance_short]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005

[gcode_macro Press_Advance_long]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

# M600: Filament Change.
[gcode_macro M600]
gcode:
  M117 $MR$:!ACTION REQUIRED - PRINTER PAUSED!|The printer has been paused and requires a filament change.
  PAUSE

[gcode_macro G29]
gcode:
    G28
    BED_MESH_CALIBRATE
    G1 X0 Y0 Z10 F4200
    SAVE_CONFIG

[gcode_macro BED_LEVEL]
gcode:
    G28
    BED_MESH_CALIBRATE
    SAVE_CONFIG

[gcode_macro Z_AXI_CALIBRATE]
gcode:
    G28
    PROBE_CALIBRATE

[gcode_macro SHAPER]
gcode:
    G28
    SHAPER_CALIBRATE
    SAVE_CONFIG

[gcode_macro PID]
gcode:
    G28
    PID_CALIBRATE HEATER=extruder TARGET=210
    PID_CALIBRATE HEATER=heater_bed TARGET=70
    SAVE_CONFIG


# ======================================================================
# Save at end macros
# ======================================================================
[gcode_macro SAVE_AT_END]
# Sets the save variable to 1 when run
variable_save: 0
gcode:
    RESPOND TYPE=command MSG="Saving config at end of print"
    SET_GCODE_VARIABLE MACRO=SAVE_AT_END VARIABLE=save VALUE=1


[gcode_macro SAVE_IF_SET]
# If SAVE_AT_END has been issued during a print any config changes will be saved
gcode:
    {% if printer["gcode_macro SAVE_AT_END"].save == 1 %}
      RESPOND TYPE=command MSG="Saving was requested during print - saving and restarting now"
      SAVE_CONFIG
    {% endif %}

[gcode_macro SAFE_PARK]
description:
  "Park the print head in a safe location
  @param {float} [X=200] - The target hotend temp
  @param {float} [Y=200] - The target hotend temp
  @param {bool} [Z_MOVE=true] - Whether or not to move the Z axis. This can be useful if you've already moved on Z"
gcode:
  SAVE_GCODE_STATE NAME=safe_park

  ##### set park positon for x and y #####
  # default is your max position from your printer.cfg
  {% set x_park = params.X|default(printer.toolhead.axis_minimum.x + 5.0)|float %}
  {% set y_park = params.Y|default(printer.toolhead.axis_maximum.y - 5.0)|float %}
  {% set should_park_z = params.Z_MOVE|default('true')|string %}
  ##### calculate safe lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set current_z = printer.toolhead.position.z|float %}
  {% set jump_z = 20.0|float %}
  {% if (current_z + jump_z) < max_z %}
    {% set z_safe = (current_z + jump_z) %}
  {% else %}
    {% set z_safe = max_z %}
  {% endif %}
  ##### end of definitions #####

  M114 ; Get current position

  {% if "xyz" in printer.toolhead.homed_axes %}
    G90 ;Use absolute coordinates
    {% if should_park_z|lower == 'true' %}
      G1 Z{z_safe} F900
    {% endif %}
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

  RESTORE_GCODE_STATE NAME=safe_park

[gcode_macro SAFE_RETRACT]
description: Retract
gcode:
  SAVE_GCODE_STATE NAME=safe_retract

  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83 ;Relative extrusion
    G91 ;Relative positioning

    G10 ;Retract filament
    G1 Z0.2 F2400 ;Raise Z
    G1 E-2 F300 ;Retract filament 2mm to prevent oozing
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  RESTORE_GCODE_STATE NAME=safe_retract

[gcode_macro UNLOAD_FILAMENT]
description: Heat and unload filament
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  # If the extruder temp is currently below params.EXTRUDER_TEMP value - heat to it
  {% if printer.extruder.temperature < params.EXTRUDER_TEMP|default(190)|float %}
    M109 S{EXTRUDER_TEMP}          ; Set and wait for nozzle to reach temperature
  {% endif %}
  M83                            ; Set extruder to relative
  G1 E10 F300                    ; Extrude a little to soften tip
  G1 E-10 F3000                  ; Jerk the filament out of the melt zone
  G1 E-50 F1800                  ; Retract the rest of the way
  G1 E-10 F900                   ; Retract the rest of the way
  M82

[gcode_macro LOAD_FILAMENT]
description: Heat and load filament
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  # If the extruder temp is currently below params.EXTRUDER_TEMP value - heat to it
  {% if printer.extruder.temperature < params.EXTRUDER_TEMP|default(190)|float %}
    M109 S{EXTRUDER_TEMP}          ; Set and wait for nozzle to reach temperature
  {% endif %}
  M83                            ; Set extruder to relative
  G1 E50 F300                    ; Load
  G1 E15 F150                    ; Prime nozzle with filament
  M82


[gcode_macro NOTIFY]

gcode:
  {% if 'MSG' in params %}
    RESPOND TYPE=command MSG="action:notification {params.MSG}"
  {% endif %}


### Cancel object (aka Marlin/RRF M486 commands) support
# Requires [exclude_object] (set in printer.cfg)

[gcode_macro M486]
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

gcode:
  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}
###

[gcode_macro MESH_CHECK]
description: Checks if a mesh exists to determine whether to create a new one
gcode:
    {% if printer.bed_mesh.profiles['default'] is defined %}
        BED_MESH_PROFILE LOAD='default' ; load mesh
    {% else %}
        BED_MESH_CALIBRATE ; generate new mesh
    {% endif %}

### Macros to help with pressure advance tuning ###
[gcode_macro SET_RETRACTIONLENGTH]
# TUNING_TOWER COMMAND=SET_RETRACTIONLENGTH PARAMETER=LENGTH START=0 FACTOR=0.15
description: Set and get the retraction length - for use with tuning tower
gcode:
  SET_RETRACTION RETRACT_LENGTH={params.LENGTH|float}
  GET_RETRACTION
  M114 ; Get current position
###


### WIP / Unfinished Macros ###

# ### First Layers Max Acceleration Macros ###
# TODO: finish this off
# [gcode_macro FIRST_LAYERS_ACCELERATION]
# adjusted_layers = 2
# adjusted_percent = 75
# gcode:
#   # Get the current velocity and acceleration
#   GET_LIMITS:
#       #TODO Get the velocity limit from the second layer or print config
#       #TODO Get the acceleration limit from the second layer or print config

#   # Calculate the modified max ACCEL for the first given number of layers
#   SET_ACCEL:
#       SET_VELOCITY_LIMIT ACCEL={normal_acceleration*{adjusted_percent/100.0}} {IF_LAYER}=0:{adjusted_layers-1}
#       M117 Setting the max acceleration to {adjusted_percent}% for the first {adjusted_layers} layers {/IF}

#   # Print the first layers with the modified max ACCEL
#   FIRST_LAYERS:
#       {IF_MOVE}G1{ELSE}G0{/IF} F{VELOCITY_LIMIT*60} ; move at current velocity
#
#       # TODO: check if IF_NEW_Z is a real thing, if not then we need to do this another way
#       {IF_NEW_Z}SET_VELOCITY_LIMIT ACCEL={normal_acceleration}{/IF} ; restore original

#   # Restore the original limits for the rest of the print
#   RESTORE_LIMITS:
#       SET_VELOCITY_LIMIT ACCEL={normal_acceleration} {IF_LAYER}={adjusted_layers}:
#       M117 Restoring the max acceleration to {normal_acceleration} %{/IF}

# This macro can be called from a start script with {FIRST_LAYERS_ACCELERATION}
### End First Layers Acceleration Macro ###
