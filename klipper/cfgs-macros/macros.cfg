
[gcode_macro save_probe_current_z_as_offset]
gcode:
    G28 ; home
    PROBE_CALIBRATE

[gcode_macro resonance_calibration]
# https://www.klipper3d.org/Measuring_Resonances.html
# ~/klipper/scripts/calibrate_shaper.py resonances_x_*.csv -o shaper_calibrate_x.png
# /usr/share/klipper/scripts/calibrate_shaper.py resonances_x_*.csv -o shaper_calibrate_x.png
# ~/klipper/scripts/calibrate_shaper.py resonances_y_*.csv -o shaper_calibrate_y.png
# /usr/share/klipper/scripts/calibrate_shaper.py resonances_y_*.csv -o shaper_calibrate_y.png
gcode:
    TEST_RESONANCES AXIS=X
    TEST_RESONANCES AXIS=Y

[gcode_macro clean_nozzle]
gcode:
    {% set wipe_count = 8 %}
    SAVE_GCODE_STATE NAME=clean_nozzle_state
    G90
    G0 Z15 F300
    {% for wipe in range(wipe_count) %}
        {% for coordinate in [(275, 4),(235, 4)] %}
        G0 X{coordinate[0]} Y{coordinate[1] + 0.25 * wipe} Z9.7 F12000
        {% endfor %}
    {% endfor %}
    RESTORE_GCODE_STATE NAME=clean_nozzle_state


[gcode_macro clean_nozzle]
gcode:
    {% set wipe_count = 8 %}
    SAVE_GCODE_STATE NAME=clean_nozzle_state
    G90
    G0 Z15 F300
    {% for wipe in range(wipe_count) %}
        {% for coordinate in [(275, 4),(235, 4)] %}
        G0 X{coordinate[0]} Y{coordinate[1] + 0.25 * wipe} Z9.7 F12000
        {% endfor %}
    {% endfor %}
    RESTORE_GCODE_STATE NAME=clean_nozzle_state


[gcode_macro Press_Advance_short]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005

[gcode_macro Press_Advance_long]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.020

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.
# https://gist.github.com/joshschools/b642dd4355cf38edbb5310b1f385e37c
# [gcode_macro M600]
# gcode:
#     {% set X = params.X|default(50)|float %}
#     {% set Y = params.Y|default(0)|float %}
#     {% set Z = params.Z|default(10)|float %}
#     SAVE_GCODE_STATE NAME=M600_state
#     PAUSE
#     G91
#     G1 E-.8 F2700
#     G1 Z{Z}
#     G90
#     G1 X{X} Y{Y} F3000
#     G91
#     G1 E-50 F1000
#     RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro G29]
gcode:
    G28
    BED_MESH_CALIBRATE
    G1 X0 Y0 Z10 F4200
    SAVE_CONFIG

[gcode_macro BED_LEVEL]
gcode:
    G28
    BED_MESH_CALIBRATE
    SAVE_CONFIG

[gcode_macro Z_AXI_CALIBRATE]
gcode:
    G28
    PROBE_CALIBRATE
    SAVE_CONFIG

[gcode_macro SHAPER]
gcode:
    G28
    SHAPER_CALIBRATE
    SAVE_CONFIG

[gcode_macro PID]
gcode:
    G28
    PID_CALIBRATE HEATER=extruder TARGET=205
    PID_CALIBRATE HEATER=heater_bed TARGET=70
    SAVE_CONFIG


# ======================================================================
# Save at end macros
# ======================================================================
[gcode_macro SAVE_AT_END]
variable_save: 0
gcode:
    SET_GCODE_VARIABLE MACRO=SAVE_AT_END VARIABLE=save VALUE=1

[gcode_macro SAVE_IF_SET]
gcode:
    {% if printer["gcode_macro SAVE_AT_END"].save == 1 %}
    {printer.gcode.action_respond_info("saving and restarting now")}
    SAVE_CONFIG
    {% endif %}



### DEFAULT MACROS BELOW ###

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z4.5 F300
    G90
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
    G28 X Y
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    G1 Y{y_park} F2000
    M84
  CANCEL_PRINT_BASE

[gcode_macro SAFE_PARK]
description:
  "Park the print head in a safe location
  @param {float} [X=200] - The target hotend temp
  @param {float} [Y=200] - The target hotend temp
  @param {bool} [Z_MOVE=true] - Whether or not to move the Z axis. This can be useful if you've already moved on Z"
gcode:
  SAVE_GCODE_STATE NAME=safe_park

  ##### set park positon for x and y #####
  # default is your max position from your printer.cfg
  {% set x_park = params.X|default(printer.toolhead.axis_minimum.x + 5.0)|float %}
  {% set y_park = params.Y|default(printer.toolhead.axis_maximum.y - 5.0)|float %}
  {% set should_park_z = params.Z_MOVE|default('true')|string %}
  ##### calculate safe lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set current_z = printer.toolhead.position.z|float %}
  {% set jump_z = 20.0|float %}
  {% if (current_z + jump_z) < max_z %}
    {% set z_safe = (current_z + jump_z) %}
  {% else %}
    {% set z_safe = max_z %}
  {% endif %}
  ##### end of definitions #####

  {% if "xyz" in printer.toolhead.homed_axes %}
    G90 ;Use absolute coordinates
    {% if should_park_z|lower == 'true' %}
      G1 Z{z_safe} F900
    {% endif %}
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

  RESTORE_GCODE_STATE NAME=safe_park

[gcode_macro SAFE_RETRACT]
description: Retract
gcode:
  SAVE_GCODE_STATE NAME=safe_retract

  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83 ;Relative extrusion
    G91 ;Relative positioning

    G10 ;Retract filament
    G1 Z0.2 F2400 ;Raise Z
    G1 E-2 F300 ;Retract filament 2mm to prevent oozing
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  RESTORE_GCODE_STATE NAME=safe_retract

[gcode_macro UNLOAD_FILAMENT]
description: Heat and unload filament
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  M109 S{EXTRUDER_TEMP}           ; Set and wait for nozzle to reach temperature
  M83                            ; Set extruder to relative
  G1 E10 F300                    ; Extrude a little to soften tip
  G1 E-10 F3000                  ; Jerk the filament out of the melt zone
  G1 E-50 F1800                  ; Retract the rest of the way
  G1 E-10 F900                   ; Retract the rest of the way
  M82

[gcode_macro LOAD_FILAMENT]
description: Heat and load filament
gcode:
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  M109 S{EXTRUDER_TEMP}          ; Set and wait for nozzle to reach temperature
  M83                            ; Set extruder to relative
  G1 E50 F300                    ; Load
  G1 E15 F150                    ; Prime nozzle with filament
  M82


# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

